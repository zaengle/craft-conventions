import{_ as s,c as n,o as a,a as e}from"./app.34b57b74.js";const h=JSON.parse('{"title":"Conventions Plugin for Craftcms","description":"","frontmatter":{},"headers":[{"level":2,"title":"The trouble with {% include %}","slug":"the-trouble-with-include"},{"level":2,"title":"Conventions helps you to manage scope","slug":"conventions-helps-you-to-manage-scope"},{"level":2,"title":"Conventions allows you to write more compact and expressive code","slug":"conventions-allows-you-to-write-more-compact-and-expressive-code"},{"level":2,"title":"Conventions helps you to organise your templates","slug":"conventions-helps-you-to-organise-your-templates"},{"level":2,"title":"Minimal working example","slug":"minimal-working-example"},{"level":3,"title":"Config","slug":"config"},{"level":3,"title":"Templating","slug":"templating"}],"relativePath":"index.md"}'),o={name:"index.md"},l=e(`<h1 id="conventions-plugin-for-craftcms" tabindex="-1">Conventions Plugin for Craftcms <a class="header-anchor" href="#conventions-plugin-for-craftcms" aria-hidden="true">#</a></h1><p><strong>At <a href="https://zaengle.com" target="_blank" rel="noopener noreferrer">Zaengle</a> we know from experience that strong conventions make projects more consistent, and consistent projects are easier to work with</strong>.</p><p>Craft doesn&#39;t impose any particular structure on how you organise your templates. In some ways that freedom is great, but on larger sites things can quickly get out of hand without some organising principles and the tools to enforce them.</p><p>Conventions aims to solve just that problem, with easy, readable, opinionated replacements for <code>include</code> that work for approximately ~97.32% of real world use-cases. Using Conventions allows you to write more expressive template code that is easier to reason about, and easier to reuse.</p><h2 id="the-trouble-with-include" tabindex="-1">The trouble with <code>{% include %}</code> <a class="header-anchor" href="#the-trouble-with-include" aria-hidden="true">#</a></h2><p><code>{% include %}</code> is probably the most frequently used Twig tag in Craft site builds, but it comes with some considerable drawbacks:</p><ol><li>If not used carefully, it can make it hard to reason about scope</li><li>When used with common best practice (<code>only</code> / <code>ignore missing</code>) it is verbose, which makes it harder to quickly infer intent</li><li>It does nothing to help you organise your templates, leaving consistency up to developer discipline</li></ol><h2 id="conventions-helps-you-to-manage-scope" tabindex="-1">Conventions helps you to manage scope <a class="header-anchor" href="#conventions-helps-you-to-manage-scope" aria-hidden="true">#</a></h2><p>While <code>include</code> does provide a mechanism for isolating context (<code> with { foo: bar } only</code>) it is opt-in, and by default includes have access to the entire scope of the template that included them.</p><p>Conventions not only enforces <code>only</code> by default, but gives to a set of additional tools to <a href="./03-managing-context.html">manage context</a> in your Patterns to help you reduce boilerplate and eliminate errors.</p><h2 id="conventions-allows-you-to-write-more-compact-and-expressive-code" tabindex="-1">Conventions allows you to write more compact and expressive code <a class="header-anchor" href="#conventions-allows-you-to-write-more-compact-and-expressive-code" aria-hidden="true">#</a></h2><p>Compare native Twig:</p><div class="language-twig"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{% </span><span style="color:#89DDFF;font-style:italic;">include</span><span style="color:#89DDFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_components/card with { data: blogEntry } only %}</span></span>
<span class="line"><span style="color:#C3E88D;">{% include </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">_components/card/#{</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">handle</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">_components/card/default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">] ignore missing with { data: blogEntry } only  %}</span></span>
<span class="line"></span></code></pre></div><p>vs Conventions:</p><div class="language-twig"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{{ component(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">card</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, { </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">blogEntry</span><span style="color:#89DDFF;"> }) }}</span></span>
<span class="line"><span style="color:#89DDFF;">{{ component([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">card/#{entry.type.handle}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">card/default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">], { </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">blogEntry</span><span style="color:#89DDFF;"> }) }}</span></span>
<span class="line"></span></code></pre></div><h2 id="conventions-helps-you-to-organise-your-templates" tabindex="-1">Conventions helps you to organise your templates <a class="header-anchor" href="#conventions-helps-you-to-organise-your-templates" aria-hidden="true">#</a></h2><p>Declaratively group like kinds of template fragment (&quot;patterns&quot;) with like:</p><p>Config</p><div class="language-php"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">patterns</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_components</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">partial</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_partials</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">];</span></span>
<span class="line"></span></code></pre></div><p>Filesystem</p><div class="language-shell"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">\u251C\u2500\u2500 _components</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502     \u251C\u2500\u2500 button.twig</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502     \u251C\u2500\u2500 card.twig</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2502     \u251C\u2500\u2500 tag.twig</span></span>
<span class="line"><span style="color:#A6ACCD;">\u2514\u2500\u2500 _partials</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u251C\u2500\u2500 footer.twig</span></span>
<span class="line"><span style="color:#A6ACCD;">      \u2514\u2500\u2500 header.twig</span></span>
<span class="line"></span></code></pre></div><p>Templates</p><div class="language-twig"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{{ partial(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">footer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">) }}</span></span>
<span class="line"></span></code></pre></div><h2 id="minimal-working-example" tabindex="-1">Minimal working example <a class="header-anchor" href="#minimal-working-example" aria-hidden="true">#</a></h2><h3 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h3><p>Given the following minimal config:</p><div class="language-php"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// config/conventions.php</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">patterns</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_components</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">partial</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_partials</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>Conventions will auto-register two new twig functions: <code>component()</code> and <code>partial()</code>. Using the default <a href="./05-concepts.html#resolvers">resolver</a>, the paths passed as the first argument to one of these functions will be resolved within the subdirectory of your projects <code>templates/</code> directory defined by the value side of the definition.</p><h3 id="templating" tabindex="-1">Templating <a class="header-anchor" href="#templating" aria-hidden="true">#</a></h3><div class="language-twig"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{{ component(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">card/blog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, { </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">: { </span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">} }) }}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{# resolves to a template at \`_components/card/blog.twig\`  #}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{# or pass an array of paths to provide fallbacks, works just like \`include([..paths]) ignore missing\` #}</span></span>
<span class="line"><span style="color:#89DDFF;">{{ component([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">card/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> ~entry.</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">handle</span><span style="color:#89DDFF;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">card/default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]) }}</span></span>
<span class="line"></span></code></pre></div><p>Already your template code should be looking cleaner and more readable. But wait, there&#39;s more...</p>`,31),p=[l];function t(r,c,i,D,y,d){return a(),n("div",null,p)}var C=s(o,[["render",t]]);export{h as __pageData,C as default};
