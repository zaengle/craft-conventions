import{_ as s,c as a,o as n,a as e}from"./app.4c118c22.js";const C=JSON.parse('{"title":"Managing context","description":"","frontmatter":{},"headers":[{"level":2,"title":"Why is it useful?","slug":"why-is-it-useful"},{"level":2,"title":"Rule types","slug":"rule-types"},{"level":2,"title":"How to define context rules","slug":"how-to-define-context-rules"},{"level":2,"title":"Context merging","slug":"context-merging"}],"relativePath":"03-managing-context.md"}'),l={name:"03-managing-context.md"},o=e(`<h1 id="managing-context" tabindex="-1">Managing context <a class="header-anchor" href="#managing-context" aria-hidden="true">#</a></h1><p>All Conventions Pattern render helper functions take two arguments: a string path used to resolve the Pattern to a Twig template, and a context object:</p><div class="language-twig"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{{ component(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blog/card</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">, { </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">: </span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;"> }) }}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">{# _components/blog/card.twig will be rendered with a \`data\` variable available set to the passed entry #}</span></span>
<span class="line"></span></code></pre></div><p>Every <code>PatternType</code> definition of can optionally include a set of rules for the context object that its <code>Pattern</code>s expects.</p><p>Additionally, you can set up default rules that apply to all your <code>PatternType</code>s in one go, and then override those rules as required.</p><h2 id="why-is-it-useful" tabindex="-1">Why is it useful? <a class="header-anchor" href="#why-is-it-useful" aria-hidden="true">#</a></h2><ul><li>Reduce boilerplate defensive code to check that a variable exists before using (no need for <code>{% set opts = opts ?? {} %}</code>)</li><li>Enforce naming patterns for context variables to increase consistency and making reasoning about (and refactoring of) your Patterns easier.</li></ul><h2 id="rule-types" tabindex="-1">Rule types <a class="header-anchor" href="#rule-types" aria-hidden="true">#</a></h2><p>Three rule types are available:</p><ol><li><code>&#39;ensure&#39;</code> will make sure context keys/variables exist, and merge/replace them with passed context that use the same names</li><li><code>&#39;require&#39;</code> will throw a template error (in <code>devMode</code> only) if the Pattern is rendered without the named variable(s) being passed to the Pattern</li><li><code>&#39;reject&#39;</code> is the opposite of require: it will throw a template error (in <code>devMode</code> only) if the Pattern is rendered <em>with</em> one or more of the named variable(s) being passed to the Pattern</li></ol><h2 id="how-to-define-context-rules" tabindex="-1">How to define context rules <a class="header-anchor" href="#how-to-define-context-rules" aria-hidden="true">#</a></h2><p>Rules are defined in <code>config/conventions.php</code> inside of the <code>params</code> key of either your <code>defaults</code> declaration (for global context rules) or within your <code>PatternType</code> definitions:</p><div class="language-php"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// defaults example</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">defaults</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Ensure that the following keys exist in the context passed to the pattern template</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">params</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Named params that *will be created if omitted*  in the context passed to the pattern template</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ensure</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// data var will exist, is an empty array</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[],</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// opts array guaranteed to exist, will always have a \`theme\` key, with a default value of &#39;light&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">opts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">theme</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">light</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Named params that *must* be set in the context passed to the pattern template,</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// or an error is thrown (in devMode)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">require</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Named params that *must not* be set in the context passed to the pattern template,</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// or an error is thrown (in devMode)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reject</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">entry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// custom &#39;field&#39; pattern type example</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">params</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ensure</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">opts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">theme</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">light</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// a context key named \`field\` *must* be passed</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">require</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">field</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// a context key named \`data\` *must not* be passed</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reject</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="context-merging" tabindex="-1">Context merging <a class="header-anchor" href="#context-merging" aria-hidden="true">#</a></h2><p>When applying any <code>ensure</code> context rules, context keys are merged where the value passed to the PatternType helper is an array or array like object.</p><p>If an instance of a class (like <code>Element</code>) is passed, the default value will instead be overwritten, so as to maintain access to the class instance&#39;s methods (not just its properties, as would be the case if it were coerced to an <code>array</code>).</p>`,16),t=[o];function p(r,c,D,i,y,F){return n(),a("div",null,t)}var A=s(l,[["render",p]]);export{C as __pageData,A as default};
